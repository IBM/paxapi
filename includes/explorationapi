<h1 id='exploration-api-functions'>Exploration API functions</h1>
<p>Exploration functions can be used to interact with exploration worksheets. </p>

<p>Exploration functions can use the following PropertyAccessor objects:</p>

<table><thead>
<tr>
<th>PropertyAccessor</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>Count</td>
<td>Counts the number of Explorations in active book.</td>
</tr>
<tr>
<td>GetAt(sheet)</td>
<td>Gets the Exploration object on the specified sheet name, from the active book, if it exists.</td>
</tr>
<tr>
<td>GetReports()</td>
<td>Gets the collection of Exploration objects from the active book.</td>
</tr>
</tbody></table>

<p>The Exploration functions that are exposed through the IBM® Cognos® automation objects are:</p>
<h2 id='clear-exploration'>Clear (Exploration)</h2>
<blockquote>
<p>Example</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Public</span> <span class="k">Sub</span> <span class="nf">Clear</span><span class="p">()</span>
    <span class="n">Reporting</span><span class="p">.</span><span class="n">Explorations</span><span class="p">.</span><span class="n">GetAt</span><span class="p">(</span><span class="n">Application</span><span class="p">.</span><span class="n">ActiveSheet</span><span class="p">.</span><span class="n">Name</span><span class="p">).</span><span class="n">Clear</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div>
<p>Clear is used to clear all of the data values in the exploration.</p>
<h3 id='syntax'>Syntax</h3>
<p>The following string is the syntax for the Clear method.</p>

<p><code>Reporting.Explorations.GetAt().Clear</code></p>
<h2 id='create-exploration'>Create (Exploration)</h2>
<blockquote>
<p>Example</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Public</span> <span class="k">Sub</span> <span class="nf">Create</span><span class="p">()</span>
    <span class="n">Reporting</span><span class="p">.</span><span class="n">Explorations</span><span class="p">.</span><span class="n">create</span> <span class="s">"http://computername"</span><span class="p">,</span> <span class="s">"Planning Sample"</span><span class="p">,</span> 
    <span class="s">"plan_BudgetPlan"</span><span class="p">,</span> <span class="s">"Goal Input"</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div>
<p>Create generates an Exploration View based on the host system URL, server name, cube name, and view name.</p>
<h3 id='syntax-2'>Syntax</h3>
<p>The following string is the syntax for the Create method.</p>

<p><code>Explorations.Create &quot;&lt;host system URL&gt;&quot;, &quot;&lt;server name&gt;&quot;, &quot;&lt;cube name&gt;&quot;, &quot;&lt;view name&gt;&quot;</code></p>
<h3 id='arguments'>Arguments</h3>
<table><thead>
<tr>
<th>Argument</th>
<th>Description</th>
<th>Data type</th>
</tr>
</thead><tbody>
<tr>
<td>host system URL</td>
<td>URL of the host system which the Exploration View is to be created from.</td>
<td>Alphanumeric string</td>
</tr>
<tr>
<td>server name</td>
<td>Name of the server which the Exploration View is to be created from.</td>
<td>Alphanumeric string</td>
</tr>
<tr>
<td>cube name</td>
<td>Name of the cube which the Exploration View is to be created from.</td>
<td>Alphanumeric string</td>
</tr>
<tr>
<td>view name</td>
<td>Name of the view which the Exploration View is to be created from.</td>
<td>Alphanumeric string</td>
</tr>
</tbody></table>
<h2 id='createfromcvs-exploration'>CreateFromCVS (Exploration)</h2>
<blockquote>
<p>Example of the syntax for updating the common view specification of a report:</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="n">Reporting</span><span class="p">.</span><span class="n">Explorations</span><span class="p">.</span><span class="n">CreateFromCVS</span><span class="p">(</span><span class="s">"http://server-example.ibm.com"</span><span class="p">,</span> <span class="s">"Planning Sample"</span><span class="p">,</span> 
<span class="p">{</span>
  <span class="s">"MDX"</span><span class="p">:</span> <span class="s">"SELECT {([d1].[h1].[line 2],[d3].[h1].[2004]),([d1].[h1].[line 2],[d3].[h1].[Q1-2004]),([d1].[h1].[line 2],[d3].[h1].[Jan-2004])}  DIMENSION PROPERTIES MEMBER_UNIQUE_NAME, LEVEL_NUMBER, CHILDREN_CARDINALITY ON 0  FROM [my_Cube] WHERE ( [d2].[h1].[toys], [d4].[h1].[USD], [d5].[h1].[Sales] )  CELL PROPERTIES CELL_ORDINAL, VALUE, FORMATTED_VALUE, FORMAT_STRING, UPDATEABLE, TM1UPDATEABLE, ANNOTATED, CONSOLIDATED"</span><span class="p">,</span>
  <span class="s">"Meta"</span><span class="p">:</span> <span class="p">{</span>
    <span class="s">"Aliases"</span><span class="p">:</span> <span class="p">{</span>
      <span class="s">"[d1].[h1]"</span><span class="p">:</span> <span class="s">"english"</span><span class="p">,</span>
      <span class="s">"[d3].[h1]"</span><span class="p">:</span> <span class="s">"english"</span><span class="p">,</span>
      <span class="s">"[d2].[h1]"</span><span class="p">:</span> <span class="s">"SKU"</span>
    <span class="p">},</span>
    <span class="s">"ExpandAboves"</span><span class="p">:</span> <span class="p">{</span>
      <span class="s">"[d1].[h1]"</span><span class="p">:</span> <span class="n">false</span><span class="p">,</span>
      <span class="s">"[d1].[h2]"</span><span class="p">:</span> <span class="n">true</span><span class="p">,</span>
      <span class="s">"[d2].[h1]"</span><span class="p">:</span> <span class="n">false</span>
    <span class="p">},</span>
    <span class="s">"ContextSets"</span><span class="p">:</span> <span class="p">{</span>
      <span class="s">"[d2].[h1]"</span><span class="p">:</span> <span class="p">{</span>
        <span class="s">"Expression"</span><span class="p">:</span> <span class="s">"{ HIERARCHIZE( { TM1SUBSETALL([d2]) } ) }"</span>
      <span class="p">},</span>
      <span class="s">"[d4].[h1]"</span><span class="p">:</span> <span class="p">{</span>
        <span class="s">"SubsetName"</span><span class="p">:</span> <span class="s">"Default"</span>
      <span class="p">},</span>
      <span class="s">"[d5].[h1]"</span><span class="p">:</span> <span class="p">{</span>
        <span class="s">"SubsetName"</span><span class="p">:</span> <span class="s">"All Deparments"</span><span class="p">,</span>
        <span class="s">"IsPublic"</span><span class="p">:</span> <span class="n">true</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">},</span>
<span class="s">"TM1Data"</span><span class="p">:{</span><span class="s">"Server"</span><span class="p">:</span><span class="s">"Planning Sample"</span><span class="p">,</span><span class="s">"Cube"</span><span class="p">:</span><span class="s">"plan_BudgetPlan"</span><span class="p">}})</span>
</code></pre></div>
<p>You can use the CreateFromCVS method with a Common View Specification to create an Exploration View with embedded additional state information.</p>

<p>A Common View Specification (CVS) is a JSON that can be used to embed additional state information when creating an Exploration View. A CVS is composed of two major parts; the MDX query and a sidecar for additional state information. Data driven mechanisms, such as TurboIntegrator are only concerned with the MDX query, however user interfaces will also consume the sidecar to ensure presentation consistency. By using a CVS, you can generate highly customizable Exploration Views. For example, using a CVS, you can define aliases and subsets as per the CVS schema input.</p>
<h3 id='syntax-3'>Syntax</h3>
<p>The following is the syntax for the CreateFromCVS method.</p>

<p><code>Reporting.Explorations.CreateFromCVS(“&lt;host system URL&gt;”, “&lt;server name&gt;”, “&lt;Common view specification&gt;”, &lt;boolean&gt;)</code></p>
<h3 id='arguments-2'>Arguments</h3>
<table><thead>
<tr>
<th>Argument</th>
<th>Description</th>
<th>Data type</th>
</tr>
</thead><tbody>
<tr>
<td>Host system URL</td>
<td>The host system URL where you want to generate a new report.</td>
<td>String</td>
</tr>
<tr>
<td>Server name</td>
<td>The name of the server where you want to generate a new report.</td>
<td>String</td>
</tr>
<tr>
<td>Common View Specification</td>
<td>The common view specification that you want to use to generate the new report.</td>
<td>String</td>
</tr>
<tr>
<td>Boolean</td>
<td>Set to <code>true</code> if you want the report to be generated on a new sheet at the default location. Set to <code>false</code> if you want the report to be generated in the current sheet at the default location. The <code>false</code> setting will also delete existing reports on the sheet.</td>
<td>True/False boolean</td>
</tr>
</tbody></table>

<aside class="notice">
For more information about the Common View Specification schema, see [Commong View Specification schema](#commonviewspecificationschema).
</aside>
<h2 id='createfrommdx-exploration'>CreateFromMDX (Exploration)</h2>
<blockquote>
<p>Example</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Public</span> <span class="k">Sub</span> <span class="nf">CreateFromMDX</span><span class="p">()</span>
    <span class="n">Reporting</span><span class="p">.</span><span class="n">Explorations</span><span class="p">.</span><span class="n">CreateFromMDX</span> <span class="s">"http://vottepps06.canlab.ibm.com:9510/"</span><span class="p">,</span> 
    <span class="s">"Planning Sample"</span><span class="p">,</span> <span class="s">"SELECT {[plan_chart_of_accounts].[plan_chart_of_accounts].
    [Revenue]} ON 0, {[plan_time].[plan_time].[2004]} ON 1 FROM [plan_BudgetPlan]"</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div>
<p>CreateFromMDX generates an Exploration View based on the host system URL, server name, and MDX string.</p>
<h3 id='syntax-4'>Syntax</h3>
<p>The following string is the syntax for the CreateFromMDX method.</p>

<p><code>Reporting.Explorations.CreateFromMDX “&lt;host system URL&gt;”, “&lt;server name&gt;”, “&lt;MDX&gt;”</code></p>
<h3 id='arguments-3'>Arguments</h3>
<table><thead>
<tr>
<th>Argument</th>
<th>Description</th>
<th>Data type</th>
</tr>
</thead><tbody>
<tr>
<td>host system URL</td>
<td>URL of the host system which the Exploration View is to be created from.</td>
<td>Alphanumeric string</td>
</tr>
<tr>
<td>server name</td>
<td>Name of the server which the Exploration View is to be created from.</td>
<td>Alphanumeric string</td>
</tr>
<tr>
<td>MDX</td>
<td>MDX statement which the Exploration View is to be created from.</td>
<td>Alphanumeric string</td>
</tr>
</tbody></table>
<h2 id='getcolumnsuppression'>GetColumnSuppression</h2>
<blockquote>
<p>Example</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Public</span> <span class="k">Sub</span> <span class="nf">AreColumnsSuppressed</span><span class="p">()</span>
    <span class="n">MsgBox</span> <span class="n">Reporting</span><span class="p">.</span><span class="n">Explorations</span><span class="p">.</span><span class="n">GetAt</span><span class="p">(</span><span class="n">Application</span><span class="p">.</span><span class="n">ActiveSheet</span><span class="p">.</span><span class="n">Name</span><span class="p">).</span>
    <span class="n">GetColumnSuppression</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div>
<p>GetColumnSuppression is used to return whether or not zero-suppression is applied to columns in the exploration.</p>
<h3 id='syntax-5'>Syntax</h3>
<p>The following string is the syntax for the GetColumnSuppression method.</p>

<p><code>Reporting.Explorations.GetAt().GetColumnSuppression</code></p>
<h2 id='getrowsuppression'>GetRowSuppression</h2>
<blockquote>
<p>Example</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Public</span> <span class="k">Sub</span> <span class="nf">AreRowsSuppressed</span><span class="p">()</span>
    <span class="n">MsgBox</span> <span class="n">Reporting</span><span class="p">.</span><span class="n">Explorations</span><span class="p">.</span><span class="n">GetAt</span><span class="p">(</span><span class="n">Application</span><span class="p">.</span><span class="n">ActiveSheet</span><span class="p">.</span><span class="n">Name</span><span class="p">).</span>
    <span class="n">GetRowSuppression</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div>
<p>GetRowSuppression is used to return whether or not zero-suppression is applied to rows in the exploration.</p>
<h3 id='syntax-6'>Syntax</h3>
<p>The following string is the syntax for the GetRowSuppression method.</p>

<p><code>Reporting.Explorations.GetAt().GetRowSuppression</code></p>
<h2 id='getspecification'>GetSpecification</h2>
<blockquote>
<p>Example</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Public</span> <span class="k">Sub</span> <span class="nf">GetSpecification</span><span class="p">()</span>
    <span class="n">Msgbox</span>
<span class="n">Reporting</span><span class="p">.</span><span class="n">Explorations</span><span class="p">.</span><span class="n">GetAt</span><span class="p">(</span><span class="n">Application</span><span class="p">.</span><span class="n">ActiveSheet</span><span class="p">.</span><span class="n">Name</span><span class="p">).</span><span class="n">GetSpecification</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div>
<p>GetSpecification is used to return the MDX string that is used to build the current Exploration.</p>
<h3 id='syntax-7'>Syntax</h3>
<p>The following string is the syntax for the GetSpecification method.</p>

<p><code>Reporting.Explorations.GetAt().GetSpecification</code></p>
<h2 id='getvalue'>GetValue</h2>
<blockquote>
<p>Example</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Public</span> <span class="k">Sub</span> <span class="nf">ToggleSetEditorPreview</span><span class="p">()</span>
    <span class="k">Dim</span> <span class="nv">x</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">Reporting</span><span class="p">.</span><span class="n">Settings</span><span class="p">.</span><span class="n">GetValue</span><span class="p">(</span><span class="s">"SetEditorPreviewOn"</span><span class="p">)</span>
    <span class="k">If</span> <span class="s">"True"</span> <span class="o">=</span> <span class="n">x</span> <span class="k">Then</span>
        <span class="n">Reporting</span><span class="p">.</span><span class="n">Settings</span><span class="p">.</span><span class="n">SetValue</span> <span class="s">"SetEditorPreviewOn"</span><span class="p">,</span> <span class="s">"False"</span>
    <span class="k">Else</span>
        <span class="n">Reporting</span><span class="p">.</span><span class="n">Settings</span><span class="p">.</span><span class="n">SetValue</span> <span class="s">"SetEditorPreviewOn"</span><span class="p">,</span> <span class="s">"True"</span>
    <span class="k">End</span> <span class="k">If</span>  
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div>
<p>GetValue is used to retrieve the value of a particular setting in a session.</p>
<h3 id='syntax-8'>Syntax</h3>
<p>The following string is the syntax for the GetValue method.</p>

<p><code>Reporting.Settings.GetValue(&quot;&lt;Setting&gt;&quot;)</code></p>
<h3 id='arguments-4'>Arguments</h3>
<table><thead>
<tr>
<th>Argument</th>
<th>Description</th>
<th>Data type</th>
</tr>
</thead><tbody>
<tr>
<td>Setting</td>
<td>The name of the setting whose value you want to retrieve.</td>
<td>String</td>
</tr>
</tbody></table>
<h2 id='refresh-exploration'>Refresh (Exploration)</h2>
<blockquote>
<p>Example</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Public</span> <span class="k">Sub</span> <span class="nf">Refresh</span><span class="p">()</span>
    <span class="n">Reporting</span><span class="p">.</span><span class="n">Explorations</span><span class="p">.</span><span class="n">GetAt</span><span class="p">(</span><span class="n">Application</span><span class="p">.</span><span class="n">ActiveSheet</span><span class="p">.</span><span class="n">Name</span><span class="p">).</span><span class="n">Refresh</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div>
<p>Refresh is used to refresh the exploration.</p>
<h3 id='syntax-9'>Syntax</h3>
<p>The following string is the syntax for the Refresh method.</p>

<p><code>Reporting.Explorations.GetAt().Refresh</code></p>
<h2 id='swaprowsandcolumns'>SwapRowsAndColumns</h2>
<blockquote>
<p>Example</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Public</span> <span class="k">Sub</span> <span class="nf">SwapsRowsAndColumns</span><span class="p">()</span>
    <span class="n">Reporting</span><span class="p">.</span><span class="n">Explorations</span><span class="p">.</span><span class="n">GetAt</span><span class="p">(</span><span class="n">Application</span><span class="p">.</span><span class="n">ActiveSheet</span><span class="p">.</span><span class="n">Name</span><span class="p">).</span><span class="n">SwapsRowsAndColumns</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div>
<p>SwapRowsAndColumns is used to swap the rows and columns in an exploration.</p>
<h3 id='syntax-10'>Syntax</h3>
<p>The following string is the syntax for the SwapRowsAndColumns method.</p>

<p><code>Reporting.Explorations.GetAt().SwapRowsAndColumns</code></p>
<h2 id='setrowsuppression'>SetRowSuppression</h2>
<blockquote>
<p>Example</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Public</span> <span class="k">Sub</span> <span class="nf">SetRowSuppressions</span><span class="p">()</span>
    <span class="n">Reporting</span><span class="p">.</span><span class="n">Explorations</span><span class="p">.</span><span class="n">GetAt</span><span class="p">(</span><span class="n">Application</span><span class="p">.</span><span class="n">ActiveSheet</span><span class="p">.</span><span class="n">Name</span><span class="p">).</span><span class="n">SetRowSuppression</span> 
    <span class="k">True</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div>
<p>SetRowSuppression is used to enable and disable zero-suppression for rows in an exploration.</p>
<h3 id='syntax-11'>Syntax</h3>
<p>The following string is the syntax for the SetRowSuppression method.</p>

<p><code>Reporting.Explorations.GetAt().SetRowSuppression &lt;True/False value&gt;</code></p>
<h3 id='arguments-5'>Arguments</h3>
<table><thead>
<tr>
<th>Argument</th>
<th>Description</th>
<th>Data type</th>
</tr>
</thead><tbody>
<tr>
<td>True</td>
<td>Enables zero-suppression.</td>
<td>Boolean</td>
</tr>
<tr>
<td>False</td>
<td>Disables zero-suppression.</td>
<td>Boolean</td>
</tr>
</tbody></table>
<h2 id='setcolumnsuppression'>SetColumnSuppression</h2>
<blockquote>
<p>Example</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Public</span> <span class="k">Sub</span> <span class="nf">SetColumnSuppressions</span><span class="p">()</span>
    <span class="n">Reporting</span><span class="p">.</span><span class="n">Explorations</span><span class="p">.</span><span class="n">GetAt</span><span class="p">(</span><span class="n">Application</span><span class="p">.</span><span class="n">ActiveSheet</span><span class="p">.</span><span class="n">Name</span><span class="p">).</span><span class="n">SetColumnSuppression</span> 
    <span class="k">True</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div>
<p>SetColumnSuppression is used to enable and disable zero-suppression for columns in an exploration.</p>
<h3 id='syntax-12'>Syntax</h3>
<p>The following string is the syntax for the SetColumnSuppression method.</p>

<p><code>Reporting.Explorations.GetAt().SetColumnSuppression &lt;True/False value&gt;</code></p>
<h3 id='arguments-6'>Arguments</h3>
<table><thead>
<tr>
<th>Argument</th>
<th>Description</th>
<th>Data type</th>
</tr>
</thead><tbody>
<tr>
<td>True</td>
<td>Enables zero-suppression.</td>
<td>Boolean</td>
</tr>
<tr>
<td>False</td>
<td>Disables zero-suppression.</td>
<td>Boolean</td>
</tr>
</tbody></table>
<h2 id='setspecification'>SetSpecification</h2>
<blockquote>
<p>Example</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Public</span> <span class="k">Sub</span> <span class="nf">SetSpecifications</span><span class="p">()</span>
    <span class="n">Reporting</span><span class="p">.</span><span class="n">Explorations</span><span class="p">.</span><span class="n">GetAt</span><span class="p">(</span><span class="n">Application</span><span class="p">.</span><span class="n">ActiveSheet</span><span class="p">.</span><span class="n">Name</span><span class="p">).</span><span class="n">SetSpecification</span> 
    <span class="s">"SELECT TM1SubsetToSet([plan_time], </span><span class="se">""</span><span class="s">current_year_and_qtrs</span><span class="se">""</span><span class="s">) DIMENSION 
    PROPERTIES MEMBER_UNIQUE_NAME, MEMBER_NAME, MEMBER_CAPTION, LEVEL_NUMBER, 
    CHILDREN_CARDINALITY, [plan_time].[Time] ON 0, TM1TOGGLEDRILLSTATE
    (TM1SubsetToSet([plan_chart_of_accounts], </span><span class="se">""</span><span class="s">Default</span><span class="se">""</span><span class="s">) , 
    {[plan_chart_of_accounts].[Revenue],[plan_chart_of_accounts].
    [Operating Expense]} , EXPAND_BELOW , RECURSIVE) DIMENSION PROPERTIES 
    MEMBER_UNIQUE_NAME, MEMBER_NAME, MEMBER_CAPTION, LEVEL_NUMBER, 
    CHILDREN_CARDINALITY, [plan_chart_of_accounts].[AccountName] ON 1 FROM 
    [plan_BudgetPlan] WHERE ([plan_version].[FY 2004 Budget] , 
    [plan_business_unit].[10000] , [plan_department].[1000] , 
    [plan_exchange_rates].[actual] , [plan_source].[goal]) DIMENSION PROPERTIES 
    MEMBER_UNIQUE_NAME, MEMBER_NAME, MEMBER_CAPTION, LEVEL_NUMBER, 
    CHILDREN_CARDINALITY , [plan_version].[VersionName] , [plan_business_unit].
    [BusinessUnit] , [plan_department].[Department] , [plan_source].[Source]"</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div>
<p>SetSpecification is used to define the subset and dimension properties of an existing exploration.</p>
<h3 id='syntax-13'>Syntax</h3>
<p>The following string is the syntax for the SetSpecification method.</p>

<p><code>Reporting.Explorations.GetAt().SetSpecification “&lt;MDX&gt;”</code></p>
<h3 id='arguments-7'>Arguments</h3>
<table><thead>
<tr>
<th>Argument</th>
<th>Description</th>
<th>Data type</th>
</tr>
</thead><tbody>
<tr>
<td>MDX</td>
<td>MDX statement used to define the subset and dimension properties of the exploration.</td>
<td>String</td>
</tr>
</tbody></table>
<h2 id='setvalue'>SetValue</h2>
<blockquote>
<p>Example</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Public</span> <span class="k">Sub</span> <span class="nf">ToggleSetEditorPreview</span><span class="p">()</span>
    <span class="k">Dim</span> <span class="nv">x</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">Reporting</span><span class="p">.</span><span class="n">Settings</span><span class="p">.</span><span class="n">GetValue</span><span class="p">(</span><span class="s">"SetEditorPreviewOn"</span><span class="p">)</span>
    <span class="k">If</span> <span class="s">"True"</span> <span class="o">=</span> <span class="n">x</span> <span class="k">Then</span>
        <span class="n">Reporting</span><span class="p">.</span><span class="n">Settings</span><span class="p">.</span><span class="n">SetValue</span> <span class="s">"SetEditorPreviewOn"</span><span class="p">,</span> <span class="s">"False"</span>
    <span class="k">Else</span>
        <span class="n">Reporting</span><span class="p">.</span><span class="n">Settings</span><span class="p">.</span><span class="n">SetValue</span> <span class="s">"SetEditorPreviewOn"</span><span class="p">,</span> <span class="s">"True"</span>
    <span class="k">End</span> <span class="k">If</span>  
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div>
<p>SetValue is used to set a new value for a specific setting and save the changes to the settings file.</p>
<h3 id='syntax-14'>Syntax</h3>
<p>The following string is the syntax for the SetValue method.</p>

<p><code>Reporting.Settings.SetValue &quot;&lt;Setting&gt;&quot;, &quot;&lt;Value&gt;&quot;</code></p>
<h3 id='arguments-8'>Arguments</h3>
<table><thead>
<tr>
<th>Argument</th>
<th>Description</th>
<th>Data type</th>
</tr>
</thead><tbody>
<tr>
<td>Setting</td>
<td>The name of the setting whose value you want to set.</td>
<td>String</td>
</tr>
<tr>
<td>Value</td>
<td>The boolean value you want to set for the specified setting.</td>
<td>True/False boolean</td>
</tr>
</tbody></table>
<h2 id='unlink'>Unlink</h2>
<blockquote>
<p>Example</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Public</span> <span class="k">Sub</span> <span class="nf">Unlink</span><span class="p">()</span>
    <span class="n">Reporting</span><span class="p">.</span><span class="n">Explorations</span><span class="p">.</span><span class="n">GetAt</span><span class="p">(</span><span class="n">Application</span><span class="p">.</span><span class="n">ActiveSheet</span><span class="p">.</span><span class="n">Name</span><span class="p">).</span><span class="n">Unlink</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div>
<p>Unlink is used to convert an exploration to a static worksheet.</p>
<h3 id='syntax-15'>Syntax</h3>
<p>The following string is the syntax for the Unlink method.</p>

<p><code>Reporting.Explorations.GetAt().Unlink</code></p>
