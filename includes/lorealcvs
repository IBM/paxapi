
## CreateFromCVS (Exploration)

> Example of the syntax for updating the common view specification of a report:

```vb
Reporting.Explorations.CreateFromCVS("http://server-example.ibm.com", "Planning Sample", 
{
  "MDX": "SELECT {([d1].[h1].[line 2],[d3].[h1].[2004]),([d1].[h1].[line 2],[d3].[h1].[Q1-2004]),([d1].[h1].[line 2],[d3].[h1].[Jan-2004])}  DIMENSION PROPERTIES MEMBER_UNIQUE_NAME, LEVEL_NUMBER, CHILDREN_CARDINALITY ON 0  FROM [my_Cube] WHERE ( [d2].[h1].[toys], [d4].[h1].[USD], [d5].[h1].[Sales] )  CELL PROPERTIES CELL_ORDINAL, VALUE, FORMATTED_VALUE, FORMAT_STRING, UPDATEABLE, TM1UPDATEABLE, ANNOTATED, CONSOLIDATED",
  "Meta": {
    "Aliases": {
      "[d1].[h1]": "english",
      "[d3].[h1]": "english",
      "[d2].[h1]": "SKU"
    },
    "ExpandAboves": {
      "[d1].[h1]": false,
      "[d1].[h2]": true,
      "[d2].[h1]": false
    },
    "ContextSets": {
      "[d2].[h1]": {
        "Expression": "{ HIERARCHIZE( { TM1SUBSETALL([d2]) } ) }"
      },
      "[d4].[h1]": {
        "SubsetName": "Default"
      },
      "[d5].[h1]": {
        "SubsetName": "All Deparments",
        "IsPublic": true
      }
    }
  },
"TM1Data":{"Server":"Planning Sample","Cube":"plan_BudgetPlan"}})
```

You can use the CreateFromCVS method with a Common View Specification to create an Exploration View with embedded additional state information.

A Common View Specification (CVS) is a JSON that can be used to embed additional state information when creating an Exploration View. A CVS is composed of two major parts; the MDX query and a sidecar for additional state information. Data driven mechanisms, such as TurboIntegrator are only concerned with the MDX query, however user interfaces will also consume the sidecar to ensure presentation consistency. By using a CVS, you can generate highly customizable Exploration Views. For example, using a CVS, you can define aliases and subsets as per the CVS schema input.

### Syntax

The following is the syntax for the CreateFromCVS method.

`Reporting.Explorations.CreateFromCVS(“<host system URL>”, “<server name>”, “<Common view specification>”, <boolean>)`

### Arguments
Argument | Description | Data type
--------- | ------- | -----------
Host system URL | The host system URL where you want to generate a new report. | String
Server name | The name of the server where you want to generate a new report. | String
Common View Specification | The common view specification that you want to use to generate the new report. | String
Boolean | Set to `true` if you want the report to be generated on a new sheet at the default location. Set to `false` if you want the report to be generated in the current sheet at the default location. The `false` setting will also delete existing reports on the sheet. | True/False boolean

<aside class="notice">
For more information about the Common View Specification schema, see .
</aside>


## CreateFromCVS (Quick Report)

> Example of the syntax for updating the common view specification of a report:

```vb
Reporting.QuickReports.CreateFromCVS("http://server-example.ibm.com", "Planning Sample", 
{
  "MDX": "SELECT {([d1].[h1].[line 2],[d3].[h1].[2004]),([d1].[h1].[line 2],[d3].[h1].[Q1-2004]),([d1].[h1].[line 2],[d3].[h1].[Jan-2004])}  DIMENSION PROPERTIES MEMBER_UNIQUE_NAME, LEVEL_NUMBER, CHILDREN_CARDINALITY ON 0  FROM [my_Cube] WHERE ( [d2].[h1].[toys], [d4].[h1].[USD], [d5].[h1].[Sales] )  CELL PROPERTIES CELL_ORDINAL, VALUE, FORMATTED_VALUE, FORMAT_STRING, UPDATEABLE, TM1UPDATEABLE, ANNOTATED, CONSOLIDATED",
  "Meta": {
    "Aliases": {
      "[d1].[h1]": "english",
      "[d3].[h1]": "english",
      "[d2].[h1]": "SKU"
    },
    "ExpandAboves": {
      "[d1].[h1]": false,
      "[d1].[h2]": true,
      "[d2].[h1]": false
    },
    "ContextSets": {
      "[d2].[h1]": {
        "Expression": "{ HIERARCHIZE( { TM1SUBSETALL([d2]) } ) }"
      },
      "[d4].[h1]": {
        "SubsetName": "Default"
      },
      "[d5].[h1]": {
        "SubsetName": "All Deparments",
        "IsPublic": true
      }
    }
  },
"TM1Data":{"Server":"Planning Sample","Cube":"plan_BudgetPlan"}})
```

You can use the CreateFromCVS method with a Common View Specification to create a Quick Report with embedded additional state information.

A Common View Specification (CVS) is a JSON that can be used to embed additional state information when creating a Quick Report. A CVS is composed of two major parts; the MDX query and a sidecar for additional state information. Data driven mechanisms, such as TurboIntegrator are only concerned with the MDX query, however user interfaces will also consume the sidecar to ensure presentation consistency. By using a CVS, you can generate highly customizable Quick Reports. For example, using a CVS, you can define aliases and subsets as per the CVS schema input.

### Syntax

The following is the syntax for the CreateFromCVS method.

`Reporting.QuickReports.CreateFromCVS(“<host system URL>”, “<server name>”, “<Common view specification>”, <boolean>)`

### Arguments
Argument | Description | Data type
--------- | ------- | -----------
Host system URL | The host system URL where you want to generate a new report. | String
Server name | The name of the server where you want to generate a new report. | String
Common view specification | The common view specification that you want to use to generate the new report. | String
Boolean | Set to `true` if you want the report to be generated on a new sheet at the default location. Set to `false` if you want the report to be generated in the current sheet at the default location. The `false` setting will also delete existing reports on the sheet. | True/False boolean