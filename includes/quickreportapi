<h1 id='quick-report-api-functions'>Quick Report API functions</h1>
<p>Quick Report functions can be used to interact with Quick Report worksheets. </p>

<p>Quick Report functions can use the following PropertyAccessor objects:</p>

<table><thead>
<tr>
<th>PropertyAccessor</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>Count</td>
<td>Counts the number of Quick Reports in the active book.</td>
</tr>
<tr>
<td>GetReports()</td>
<td>Gets the collection of Quick Report objects from the active book.</td>
</tr>
</tbody></table>

<p>The Quick Report functions that are exposed through the IBM® Cognos® automation objects are:</p>
<h2 id='clear-quick-report'>Clear (Quick Report)</h2>
<blockquote>
<p>Example</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Public</span> <span class="k">Sub</span> <span class="nf">Clear</span><span class="p">()</span>
    <span class="n">Reporting</span><span class="p">.</span><span class="n">GetCurrentReport</span><span class="p">(</span><span class="o">&lt;</span><span class="n">ActiveCell</span><span class="o">&gt;</span><span class="p">).</span><span class="n">Clear</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div>
<p>Clear is used to clear data from the Quick Report.</p>
<h3 id='syntax'>Syntax</h3>
<p>The following string is the syntax for the Clear method.</p>

<p><code>Reporting.GetCurrentReport(&lt;ActiveCell&gt;).Clear</code></p>
<h2 id='columnhierarchies'>ColumnHierarchies</h2>
<blockquote>
<p>Example</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Sub</span> <span class="nf">ColumnHierarchies</span><span class="p">()</span>
    <span class="k">Dim</span> <span class="nv">columns</span> <span class="ow">As</span> <span class="kt">String</span>
    <span class="k">For</span> <span class="k">Each</span> <span class="n">Column</span> <span class="ow">In</span> <span class="n">cafe</span><span class="p">.</span><span class="n">QuickReports</span><span class="p">.</span><span class="n">Get</span><span class="p">(</span><span class="s">"0"</span><span class="p">).</span><span class="n">ColumnDimensions</span>
        <span class="k">If</span> <span class="n">columns</span> <span class="o">&lt;&gt;</span> <span class="s">""</span> <span class="k">Then</span>
            <span class="n">columns</span> <span class="o">=</span> <span class="n">columns</span> <span class="o">&amp;</span> <span class="s">", "</span> <span class="o">&amp;</span> <span class="n">vbNewLine</span>
        <span class="k">End</span> <span class="k">If</span>
        <span class="n">columns</span> <span class="o">=</span> <span class="n">columns</span> <span class="o">&amp;</span> <span class="n">Column</span>
    <span class="n">MsgBox</span> <span class="s">"Columns:"</span> <span class="n">columns</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div>
<p>ColumnHierarchies is used to return the hierarchies that exist in the columns of a Quick Report report.</p>
<h3 id='syntax-2'>Syntax</h3>
<p>The following string is the syntax for the ColumnHierarchies method.</p>

<p><code>cafe.QuickReports.Get(&quot;&lt;Quick Report ID&quot;).ColumnDimensions</code></p>
<h3 id='arguments'>Arguments</h3>
<table><thead>
<tr>
<th>Argument</th>
<th>Description</th>
<th>Data type</th>
</tr>
</thead><tbody>
<tr>
<td>Quick Report ID</td>
<td>The ID of the Quick Report that the column hierarchies are being returned from</td>
<td>Integer</td>
</tr>
</tbody></table>
<h2 id='commit'>Commit</h2>
<blockquote>
<p>Example</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Public</span> <span class="k">Sub</span> <span class="nf">Commit</span><span class="p">()</span>
    <span class="n">Reporting</span><span class="p">.</span><span class="n">GetCurrentReport</span><span class="p">(</span><span class="o">&lt;</span><span class="n">ActiveCell</span><span class="o">&gt;</span><span class="p">).</span><span class="n">Commit</span> <span class="k">True</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div>
<p>Commit is used to commit the Quick Report report.</p>
<h3 id='syntax-3'>Syntax</h3>
<p>The following string is the syntax for the Commit method.</p>

<p><code>Reporting.GetCurrentReport(&lt;ActiveCell&gt;).Commit &lt;True&gt;</code></p>
<h2 id='create-quick-report'>Create (Quick Report)</h2>
<blockquote>
<p>Example</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Public</span> <span class="k">Sub</span> <span class="nf">Create</span><span class="p">()</span>
    <span class="n">Reporting</span><span class="p">.</span><span class="n">QuickReports</span><span class="p">.</span><span class="n">Create</span> <span class="s">"http://computername/"</span><span class="p">,</span> <span class="s">"Planning Sample"</span><span class="p">,</span> 
    <span class="s">"plan_BudgetPlan"</span><span class="p">,</span> <span class="s">"Goal Input"</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div>
<p>Create generates a Quick Report based on the host system URL, server name, cube name, and view name.</p>
<h3 id='syntax-4'>Syntax</h3>
<p>The following string is the syntax for the Create method.</p>

<p><code>Reporting.QuickReports.Create &quot;&lt;host system URL&gt;&quot;, &quot;&lt;server name&gt;&quot;, &quot;&lt;cube name&gt;&quot;, &quot;&lt;view name&gt;&quot;</code></p>
<h3 id='arguments-2'>Arguments</h3>
<table><thead>
<tr>
<th>Argument</th>
<th>Description</th>
<th>Data type</th>
</tr>
</thead><tbody>
<tr>
<td>host system URL</td>
<td>URL of the host system which the Quick Report is to be created from.</td>
<td>Alphanumeric string</td>
</tr>
<tr>
<td>server name</td>
<td>Name of the server which the Quick Report is to be created from.</td>
<td>Alphanumeric string</td>
</tr>
<tr>
<td>cube name</td>
<td>Name of the cube which the Quick Report is to be created from.</td>
<td>Alphanumeric string</td>
</tr>
<tr>
<td>view name</td>
<td>Name of the view which the Quick Report is to be created from.</td>
<td>Alphanumeric string</td>
</tr>
</tbody></table>
<h2 id='createfromcvs-quick-report'>CreateFromCVS (Quick Report)</h2>
<blockquote>
<p>Example of the syntax for updating the common view specification of a report:</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="n">Reporting</span><span class="p">.</span><span class="n">QuickReports</span><span class="p">.</span><span class="n">CreateFromCVS</span><span class="p">(</span><span class="s">"http://server-example.ibm.com"</span><span class="p">,</span> <span class="s">"Planning Sample"</span><span class="p">,</span> 
<span class="p">{</span>
  <span class="s">"MDX"</span><span class="p">:</span> <span class="s">"SELECT {([d1].[h1].[line 2],[d3].[h1].[2004]),([d1].[h1].[line 2],[d3].[h1].[Q1-2004]),([d1].[h1].[line 2],[d3].[h1].[Jan-2004])}  DIMENSION PROPERTIES MEMBER_UNIQUE_NAME, LEVEL_NUMBER, CHILDREN_CARDINALITY ON 0  FROM [my_Cube] WHERE ( [d2].[h1].[toys], [d4].[h1].[USD], [d5].[h1].[Sales] )  CELL PROPERTIES CELL_ORDINAL, VALUE, FORMATTED_VALUE, FORMAT_STRING, UPDATEABLE, TM1UPDATEABLE, ANNOTATED, CONSOLIDATED"</span><span class="p">,</span>
  <span class="s">"Meta"</span><span class="p">:</span> <span class="p">{</span>
    <span class="s">"Aliases"</span><span class="p">:</span> <span class="p">{</span>
      <span class="s">"[d1].[h1]"</span><span class="p">:</span> <span class="s">"english"</span><span class="p">,</span>
      <span class="s">"[d3].[h1]"</span><span class="p">:</span> <span class="s">"english"</span><span class="p">,</span>
      <span class="s">"[d2].[h1]"</span><span class="p">:</span> <span class="s">"SKU"</span>
    <span class="p">},</span>
    <span class="s">"ExpandAboves"</span><span class="p">:</span> <span class="p">{</span>
      <span class="s">"[d1].[h1]"</span><span class="p">:</span> <span class="n">false</span><span class="p">,</span>
      <span class="s">"[d1].[h2]"</span><span class="p">:</span> <span class="n">true</span><span class="p">,</span>
      <span class="s">"[d2].[h1]"</span><span class="p">:</span> <span class="n">false</span>
    <span class="p">},</span>
    <span class="s">"ContextSets"</span><span class="p">:</span> <span class="p">{</span>
      <span class="s">"[d2].[h1]"</span><span class="p">:</span> <span class="p">{</span>
        <span class="s">"Expression"</span><span class="p">:</span> <span class="s">"{ HIERARCHIZE( { TM1SUBSETALL([d2]) } ) }"</span>
      <span class="p">},</span>
      <span class="s">"[d4].[h1]"</span><span class="p">:</span> <span class="p">{</span>
        <span class="s">"SubsetName"</span><span class="p">:</span> <span class="s">"Default"</span>
      <span class="p">},</span>
      <span class="s">"[d5].[h1]"</span><span class="p">:</span> <span class="p">{</span>
        <span class="s">"SubsetName"</span><span class="p">:</span> <span class="s">"All Deparments"</span><span class="p">,</span>
        <span class="s">"IsPublic"</span><span class="p">:</span> <span class="n">true</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">},</span>
<span class="s">"TM1Data"</span><span class="p">:{</span><span class="s">"Server"</span><span class="p">:</span><span class="s">"Planning Sample"</span><span class="p">,</span><span class="s">"Cube"</span><span class="p">:</span><span class="s">"plan_BudgetPlan"</span><span class="p">}})</span>
</code></pre></div>
<p>You can use the CreateFromCVS method with a Common View Specification to create a Quick Report with embedded additional state information.</p>

<p>A Common View Specification (CVS) is a JSON that can be used to embed additional state information when creating a Quick Report. A CVS is composed of two major parts; the MDX query and a sidecar for additional state information. Data driven mechanisms, such as TurboIntegrator are only concerned with the MDX query, however user interfaces will also consume the sidecar to ensure presentation consistency. By using a CVS, you can generate highly customizable Quick Reports. For example, using a CVS, you can define aliases and subsets as per the CVS schema input.</p>
<h3 id='syntax-5'>Syntax</h3>
<p>The following is the syntax for the CreateFromCVS method.</p>

<p><code>Reporting.QuickReports.CreateFromCVS(“&lt;host system URL&gt;”, “&lt;server name&gt;”, “&lt;Common view specification&gt;”, &lt;boolean&gt;)</code></p>
<h3 id='arguments-3'>Arguments</h3>
<table><thead>
<tr>
<th>Argument</th>
<th>Description</th>
<th>Data type</th>
</tr>
</thead><tbody>
<tr>
<td>Host system URL</td>
<td>The host system URL where you want to generate a new report.</td>
<td>String</td>
</tr>
<tr>
<td>Server name</td>
<td>The name of the server where you want to generate a new report.</td>
<td>String</td>
</tr>
<tr>
<td>Common View Specification</td>
<td>The common view specification that you want to use to generate the new report.</td>
<td>String</td>
</tr>
<tr>
<td>Boolean</td>
<td>Set to <code>true</code> if you want the report to be generated on a new sheet at the default location. Set to <code>false</code> if you want the report to be generated in the current sheet at the default location. The <code>false</code> setting will also delete existing reports on the sheet.</td>
<td>True/False boolean</td>
</tr>
</tbody></table>

<p>For more information about the Common View Specification schema, see <a href="#common-view-specification-schema">Commong View Specification schema</a>.</p>
<h2 id='createfrommdx-quick-report'>CreateFromMDX (Quick Report)</h2>
<blockquote>
<p>Example</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Public</span> <span class="k">Sub</span> <span class="nf">CreateFromMDX</span><span class="p">()</span>
    <span class="n">Reporting</span><span class="p">.</span><span class="n">QuickReports</span><span class="p">.</span><span class="n">CreateFromMDX</span> <span class="s">"http://vottepps06.canlab.ibm.com:9510/"</span><span class="p">,</span>
    <span class="s">"Planning Sample"</span><span class="p">,</span> <span class="s">"SELECT {[plan_chart_of_accounts].[plan_chart_of_accounts].
    [Revenue]} ON 0, {[plan_time].[plan_time].[2004]} ON 1 FROM [plan_BudgetPlan]"</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div>
<p>CreateFromMDX generates a Quick Report based on the host system URL, server name, and MDX string.</p>
<h3 id='syntax-6'>Syntax</h3>
<p>The following string is the syntax for the CreateFromMDX method.</p>

<p><code>Reporting.QuickReports.CreateFromMDX “&lt;host system URL&gt;”, “&lt;server name&gt;”, “&lt;MDX&gt;”</code></p>
<h3 id='arguments-4'>Arguments</h3>
<table><thead>
<tr>
<th>Argument</th>
<th>Description</th>
<th>Data type</th>
</tr>
</thead><tbody>
<tr>
<td>host system URL</td>
<td>URL of the host system which the Quick Report is to be created from.</td>
<td>Alphanumeric string</td>
</tr>
<tr>
<td>server name</td>
<td>Name of the server which the Quick Report is to be created from.</td>
<td>Alphanumeric string</td>
</tr>
<tr>
<td>MDX</td>
<td>MDX statement which the Quick Report is to be created from.</td>
<td>Alphanumeric string</td>
</tr>
</tbody></table>
<h2 id='cube'>Cube</h2>
<blockquote>
<p>Example</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Public</span> <span class="k">Sub</span> <span class="nf">Cube</span><span class="p">()</span>
    <span class="n">MsgBox</span> <span class="n">Reporting</span><span class="p">.</span><span class="n">GetCurrentReport</span><span class="p">(</span><span class="o">&lt;</span><span class="n">ActiveCell</span><span class="o">&gt;</span><span class="p">).</span><span class="n">Cube</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div>
<blockquote>
<p>If the Quick Report is located in the plan_BudgetPlan cube, in the Planning Sample server, the Cube function would return:</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="err">“</span><span class="p">{</span><span class="err">“</span><span class="n">server</span><span class="err">”</span><span class="p">:</span><span class="n">Planning</span> <span class="n">Sample</span><span class="p">,</span> <span class="err">“</span><span class="n">cube</span><span class="err">”</span><span class="p">:</span><span class="n">plan_BudgetPlan</span><span class="p">}</span><span class="err">”</span>
</code></pre></div>
<p>Cube returns the search path of the Quick Report. </p>
<h3 id='syntax-7'>Syntax</h3>
<p>The following string is the syntax for the Cube method.</p>

<p><code>Reporting.GetCurrentReport(&lt;ActiveCell&gt;).Cube</code></p>
<h2 id='datasource'>DataSource</h2>
<blockquote>
<p>Example</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Public</span> <span class="k">Sub</span> <span class="nf">DataSource</span><span class="p">()</span>
    <span class="n">MsgBox</span> <span class="n">Reporting</span><span class="p">.</span><span class="n">GetCurrentReport</span><span class="p">(</span><span class="o">&lt;</span><span class="n">ActiveCell</span><span class="o">&gt;</span><span class="p">).</span><span class="n">DataSource</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div>
<p>DataSource is used to return the Quick Report host URL.</p>
<h3 id='syntax-8'>Syntax</h3>
<p>The following string is the syntax for the DataSource method.</p>

<p><code>Reporting.GetCurrentReport(&lt;ActiveCell&gt;).DataSource</code></p>
<h2 id='enableindents'>EnableIndents</h2>
<blockquote>
<p>Example</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Public</span> <span class="k">Sub</span> <span class="nf">EnableIndents</span><span class="p">()</span>
    <span class="n">Reporting</span><span class="p">.</span><span class="n">GetCurrentReport</span><span class="p">(</span><span class="o">&lt;</span><span class="n">ActiveCell</span><span class="o">&gt;</span><span class="p">).</span><span class="n">EnableIndents</span> <span class="k">True</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div>
<p>EnableIndents is used to enable level based indents in your Quick Report reports.</p>
<h3 id='syntax-9'>Syntax</h3>
<p>The following string is the syntax for the EnableIndents method.</p>

<p><code>Reporting.GetCurrentReport(&lt;ActiveCell&gt;).EnableIndents &lt;True/False value&gt;</code></p>
<h3 id='arguments-5'>Arguments</h3>
<table><thead>
<tr>
<th>Argument</th>
<th>Description</th>
<th>Data type</th>
</tr>
</thead><tbody>
<tr>
<td>True</td>
<td>Enables indents in Quick Reports.</td>
<td>Boolean</td>
</tr>
<tr>
<td>False</td>
<td>Disables indents in Quick Reports.</td>
<td>Boolean</td>
</tr>
</tbody></table>
<h2 id='executequery'>ExecuteQuery</h2>
<blockquote>
<p>The following syntax is an example of the ExecuteQuery method stored in a VBA module:</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Public</span> <span class="k">Property</span> <span class="nf">Get</span> <span class="n">GetRowsAxis</span><span class="p">(</span><span class="n">query</span> <span class="ow">As</span> <span class="kt">String</span><span class="p">)</span> <span class="ow">As</span> <span class="n">Collection</span>
    <span class="k">Set</span> <span class="n">c</span> <span class="o">=</span> <span class="n">Reporting</span><span class="p">.</span><span class="n">ExecuteQuery</span><span class="p">(</span><span class="s">"http://pa.exampletm1.ibmcloud.com"</span><span class="p">,</span> <span class="s">"SData"</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">MDX</span> <span class="n">query</span><span class="o">&gt;</span><span class="p">)</span>
    <span class="k">Dim</span> <span class="nv">result</span> <span class="ow">As</span> <span class="k">New</span> <span class="n">Collection</span>
    <span class="k">For</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">To</span> <span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">GetAxes</span><span class="p">().</span><span class="n">Item</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="n">GetProperties</span><span class="p">().</span><span class="n">Item</span><span class="p">(</span><span class="s">"tuples"</span><span class="p">).</span><span class="n">GetMembers</span><span class="p">().</span><span class="n">Count</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">result</span><span class="p">.</span><span class="n">Add</span> <span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">GetAxes</span><span class="p">().</span><span class="n">Item</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="n">GetProperties</span><span class="p">().</span><span class="n">Item</span><span class="p">(</span><span class="s">"tuples"</span><span class="p">).</span><span class="n">GetMembers</span><span class="p">().</span><span class="n">Item</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="n">GetMembers</span><span class="p">().</span><span class="n">Item</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="n">GetValue</span><span class="p">())</span>
    <span class="k">Next</span> <span class="n">i</span>
    <span class="k">Set</span> <span class="n">GetRowsAxis</span> <span class="o">=</span> <span class="n">result</span>
<span class="k">End</span> <span class="k">Property</span>
</code></pre></div>
<blockquote>
<p>The following syntax is an example of the ExecuteQuery method being called in a worksheet:</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Private</span> <span class="k">Sub</span> <span class="nf">Worksheet_Change</span><span class="p">()</span>
    <span class="k">Dim</span> <span class="nv">c</span> <span class="ow">As</span> <span class="n">Collection</span>
    <span class="k">Set</span> <span class="n">c</span> <span class="o">=</span> <span class="n">RefreshAPIExample</span><span class="p">.</span><span class="n">GetRowsAxis</span><span class="p">(</span><span class="n">Cells</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">4</span><span class="p">).</span><span class="n">Value2</span><span class="p">)</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div>
<blockquote>
<p>ExecuteQuery is triggered from a worksheet change event on cell D20. If an MDX query string exists in cell D20, and is modified, the selected MDX will be executed through the ExecuteQuery call and will return a CellSet object. This CellSet object can then be traversed in a similar way to a JSON object.</p>
</blockquote>

<p>ExecuteQuery is a method used to execute selected MDX statements in your Quick Report reports.</p>
<h3 id='syntax-10'>Syntax</h3>
<p>The following string is the syntax for the ExecuteQuery method.</p>

<p><code>Reporting.ExecuteQuery(&quot;&lt;data source URL&gt;&quot;, &quot;&lt;server name&gt;&quot;, &lt;MDX query&gt;)</code></p>
<h3 id='arguments-6'>Arguments</h3>
<table><thead>
<tr>
<th>Argument</th>
<th>Description</th>
<th>Data type</th>
</tr>
</thead><tbody>
<tr>
<td>data source URL</td>
<td>The data source URL used in the Quick Report.</td>
<td>String</td>
</tr>
<tr>
<td>server name</td>
<td>The server name used in the Quick Report.</td>
<td>String</td>
</tr>
<tr>
<td>MDX query</td>
<td>The MDX query string to be executed by the method.</td>
<td>String</td>
</tr>
</tbody></table>
<h2 id='gettuple'>GetTuple</h2>
<blockquote>
<p>Example</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Sub</span> <span class="nf">PrintTuple</span><span class="p">()</span>
    <span class="k">Set</span> <span class="n">tupleObject</span> <span class="o">=</span> <span class="n">cafe</span><span class="p">.</span><span class="n">QuickReports</span><span class="p">.</span><span class="n">Get</span><span class="p">(</span><span class="s">"0"</span><span class="p">).</span><span class="n">GetTuple</span><span class="p">(</span><span class="n">ActiveCell</span><span class="p">)</span>
    <span class="k">Dim</span> <span class="nv">tuple</span> <span class="ow">As</span> <span class="kt">String</span>
    <span class="k">For</span> <span class="n">tupleIdx</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">To</span> <span class="n">tupleObject</span><span class="p">.</span><span class="n">Count</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="k">If</span> <span class="n">tuple</span> <span class="o">&lt;&gt;</span> <span class="s">""</span> <span class="k">Then</span>
            <span class="n">tuple</span> <span class="o">=</span> <span class="n">tuple</span> <span class="o">&amp;</span> <span class="s">", "</span> <span class="o">&amp;</span> <span class="n">vbNewLine</span>
        <span class="k">End</span> <span class="k">If</span>
        <span class="n">tuple</span> <span class="o">=</span> <span class="n">tuple</span> <span class="o">&amp;</span> <span class="n">tupleObject</span><span class="p">.</span><span class="n">Item</span><span class="p">(</span><span class="n">tupleIdx</span><span class="p">)</span>
    <span class="k">Next</span>
    <span class="n">MsgBox</span> <span class="s">"Tuple: "</span> <span class="o">&amp;</span> <span class="n">vbNewLine</span> <span class="o">&amp;</span> <span class="n">tuple</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div>
<p>GetTuple is used to return the tuple of a Quick Report at a given range. This function will return the tuple at the ActiveCell if no range is specified.</p>
<h3 id='syntax-11'>Syntax</h3>
<p>The following string is the syntax for the GetTuple method.</p>

<p><code>cafe.QuickReports.Get(&quot;&lt;Quick Report ID&gt;&quot;).GetTuple(ActiveCell)</code></p>
<h3 id='arguments-7'>Arguments</h3>
<table><thead>
<tr>
<th>Argument</th>
<th>Description</th>
<th>Data type</th>
</tr>
</thead><tbody>
<tr>
<td>Quick Report ID</td>
<td>The ID of the Quick Report that the tuple is being returned from.</td>
<td>Integer</td>
</tr>
</tbody></table>
<h2 id='getspecification'>GetSpecification</h2>
<blockquote>
<p>Example</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Public</span> <span class="k">Sub</span> <span class="nf">GetSpecification</span><span class="p">()</span>
    <span class="n">MsgBox</span> <span class="n">Reporting</span><span class="p">.</span><span class="n">GetCurrentReport</span><span class="p">(</span><span class="o">&lt;</span><span class="n">ActiveCell</span><span class="o">&gt;</span><span class="p">).</span><span class="n">GetSpecification</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div>
<p>GetSpecification is used to return the MDX string that is used to build the current Quick Report.</p>
<h3 id='syntax-12'>Syntax</h3>
<p>The following string is the syntax for the GetSpecification method.</p>

<p><code>Reporting.GetCurrentReport(&lt;ActiveCell&gt;).GetSpecification</code></p>
<h2 id='getreport'>GetReport</h2>
<blockquote>
<p>Example</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Public</span> <span class="k">Sub</span> <span class="nf">GetReport</span><span class="p">()</span>
    <span class="n">Reporting</span><span class="p">.</span><span class="n">QuickReports</span><span class="p">.</span><span class="n">Get</span> <span class="p">(</span><span class="s">"5"</span><span class="p">)</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div>
<p>GetReport is used to return a specific Quick Report based on the Quick Report ID.</p>
<h3 id='syntax-13'>Syntax</h3>
<p>The following string is the syntax for the GetReport method.</p>

<p><code>Reporting.QuickReports.Get (&quot;&lt;report ID&gt;&quot;)</code></p>
<h3 id='arguments-8'>Arguments</h3>
<table><thead>
<tr>
<th>Argument</th>
<th>Description</th>
<th>Data type</th>
</tr>
</thead><tbody>
<tr>
<td>report ID</td>
<td>ID of the Quick Report which the function is to return.</td>
<td>Integer</td>
</tr>
</tbody></table>
<h2 id='id'>ID</h2>
<blockquote>
<p>Example</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Public</span> <span class="k">Sub</span> <span class="nf">ID</span><span class="p">()</span>
    <span class="n">MsgBox</span> <span class="n">Reporting</span><span class="p">.</span><span class="n">GetCurrentReport</span><span class="p">(</span><span class="o">&lt;</span><span class="n">ActiveCell</span><span class="o">&gt;</span><span class="p">).</span><span class="n">ID</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div>
<p>ID is used to return the Quick Report ID.</p>
<h3 id='syntax-14'>Syntax</h3>
<p>The following string is the syntax for the ID method.</p>

<p><code>Reporting.GetCurrentReport(&lt;ActiveCell&gt;).ID</code></p>
<h2 id='name'>Name</h2>
<blockquote>
<p>Example</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Public</span> <span class="k">Sub</span> <span class="nf">Name</span><span class="p">()</span>
    <span class="n">MsgBox</span> <span class="n">Reporting</span><span class="p">.</span><span class="n">GetCurrentReport</span><span class="p">(</span><span class="o">&lt;</span><span class="n">ActiveCell</span><span class="o">&gt;</span><span class="p">).</span><span class="n">Name</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div>
<p>Name is used to return the cube name and view name which the Quick Report is created from.</p>
<h3 id='syntax-15'>Syntax</h3>
<p>The following string is the syntax for the Name method.</p>

<p><code>Reporting.GetCurrentReport(&lt;ActiveCell&gt;).Name</code></p>
<h2 id='rebuild'>Rebuild</h2>
<blockquote>
<p>Example</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Public</span> <span class="k">Sub</span> <span class="nf">Rebuild</span><span class="p">()</span>
    <span class="n">Reporting</span><span class="p">.</span><span class="n">GetCurrentReport</span><span class="p">(</span><span class="o">&lt;</span><span class="n">ActiveCell</span><span class="o">&gt;</span><span class="p">).</span><span class="n">Rebuild</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div>
<p>Rebuild is used to rebuild a Quick Report.</p>
<h3 id='syntax-16'>Syntax</h3>
<p>The following string is the syntax for the Rebuild method.</p>

<p><code>Reporting.GetCurrentReport(&lt;ActiveCell&gt;).Rebuild</code></p>
<h2 id='rebuildspecification'>RebuildSpecification</h2>
<blockquote>
<p>Example</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Public</span> <span class="k">Sub</span> <span class="nf">RebuildSpecification</span><span class="p">()</span>
    <span class="n">MsgBox</span> <span class="n">Reporting</span><span class="p">.</span><span class="n">GetCurrentReport</span><span class="p">(</span><span class="o">&lt;</span><span class="n">ActiveCell</span><span class="o">&gt;</span><span class="p">).</span><span class="n">RebuildSpecification</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div>
<p>RebuildSpecification is used to return the MDX string that is used when rebuilding the Quick Report.</p>
<h3 id='syntax-17'>Syntax</h3>
<p>The following string is the syntax for the RebuildSpecification method.</p>

<p><code>Reporting.GetCurrentReport(&lt;ActiveCell&gt;).RebuildSpecification</code></p>
<h2 id='refresh-quick-report'>Refresh (Quick Report)</h2>
<blockquote>
<p>Example</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Public</span> <span class="k">Sub</span> <span class="nf">Refresh</span><span class="p">()</span>
    <span class="n">Reporting</span><span class="p">.</span><span class="n">GetCurrentReport</span><span class="p">(</span><span class="o">&lt;</span><span class="n">ActiveCell</span><span class="o">&gt;</span><span class="p">).</span><span class="n">Refresh</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div>
<p>Refresh is used to refresh a Quick Report.</p>
<h3 id='syntax-18'>Syntax</h3>
<p>The following string is the syntax for the Refresh method.</p>

<p><code>Reporting.GetCurrentReport(&lt;ActiveCell&gt;).Refresh</code></p>
<h2 id='replace'>Replace</h2>
<blockquote>
<p>Example</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Public</span> <span class="k">Sub</span> <span class="nf">Replace</span><span class="p">()</span>
    <span class="n">Reporting</span><span class="p">.</span><span class="n">QuickReports</span><span class="p">.</span><span class="n">Replace</span> <span class="n">Reporting</span><span class="p">.</span><span class="n">GetCurrentReport</span><span class="p">(</span><span class="n">ActiveCell</span><span class="p">).</span><span class="err">4,</span> 
    <span class="err">"</span><span class="n">SELECT</span> <span class="p">{</span><span class="err">[</span><span class="n">plan_chart_of_accounts</span><span class="err">]</span><span class="p">.</span><span class="err">[</span><span class="n">plan_chart_of_accounts</span><span class="err">]</span><span class="p">.</span><span class="err">[</span><span class="n">Revenue</span><span class="err">]</span><span class="p">}</span> <span class="n">ON</span> <span class="mi">0</span><span class="p">,</span> 
    <span class="p">{</span><span class="err">[</span><span class="n">plan_time</span><span class="err">]</span><span class="p">.</span><span class="err">[</span><span class="n">plan_time</span><span class="err">]</span><span class="p">.</span><span class="err">[2004]}</span> <span class="n">ON</span> <span class="mi">1</span> <span class="n">FROM</span> <span class="err">[</span><span class="n">plan_BudgetPlan</span><span class="err">]</span><span class="s">"
End Sub
</span></code></pre></div>
<p>Replace is used to replace the MDX statement in the Quick Report with another MDX statement.</p>
<h3 id='syntax-19'>Syntax</h3>
<p>The following string is the syntax for the Replace method.</p>

<p><code>Reporting.QuickReports.Replace Reporting.GetCurrentReport(ActiveCell).&lt;Quick Report ID&gt;, &lt;MDX statement&gt;</code></p>
<h3 id='arguments-9'>Arguments</h3>
<table><thead>
<tr>
<th>Argument</th>
<th>Description</th>
<th>Data type</th>
</tr>
</thead><tbody>
<tr>
<td>Quick Report ID</td>
<td>The ID of the Quick Report that will have its MDX statement replaced.</td>
<td>Integer</td>
</tr>
<tr>
<td>MDX statement</td>
<td>The MDX statement that will be replacing the current MDX statement in the Quick Report.</td>
<td>String</td>
</tr>
</tbody></table>
<h2 id='replacewithformats'>ReplaceWithFormats</h2>
<blockquote>
<p>Example</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Public</span> <span class="k">Sub</span> <span class="nf">ReplaceWithFormats</span><span class="p">()</span>
   <span class="n">Reporting</span><span class="p">.</span><span class="n">QuickReports</span><span class="p">.</span><span class="n">ReplaceWithFormats</span> <span class="n">Reporting</span><span class="p">.</span><span class="n">GetCurrentReport</span><span class="p">(</span><span class="n">ActiveCell</span><span class="p">).</span><span class="err">4,</span>
   <span class="err">"</span><span class="n">SELECT</span> <span class="p">{</span><span class="err">[</span><span class="n">plan_chart_of_accounts</span><span class="err">]</span><span class="p">.</span><span class="err">[</span><span class="n">plan_chart_of_accounts</span><span class="err">]</span><span class="p">.</span><span class="err">[</span><span class="n">Revenue</span><span class="err">]</span><span class="p">}</span> <span class="n">ON</span> <span class="mi">0</span><span class="p">,</span>
   <span class="p">{</span><span class="err">[</span><span class="n">plan_time</span><span class="err">]</span><span class="p">.</span><span class="err">[</span><span class="n">plan_time</span><span class="err">]</span><span class="p">.</span><span class="err">[2004]}</span> <span class="n">ON</span> <span class="mi">1</span> <span class="n">FROM</span> <span class="err">[</span><span class="n">plan_BudgetPlan</span><span class="err">]</span><span class="s">", True
End Sub
</span></code></pre></div>
<p>ReplaceWithFormats is used to replace the MDX statement in the Quick Report with another MDX statement. ReplaceWithFormats also has the option to preserve or destroy the existing sheet formatting in the Quick Report.</p>
<h3 id='syntax-20'>Syntax</h3>
<p>The following string is the syntax for the ReplaceWithFormats method.</p>

<p><code>Reporting.QuickReports.ReplaceWithFormats Reporting.GetCurrentReport(ActiveCell).&lt;Quick Report ID&gt;, &lt;MDX statement&gt;, &lt;ReFormat&gt;</code></p>
<h3 id='arguments-10'>Arguments</h3>
<table><thead>
<tr>
<th>Argument</th>
<th>Description</th>
<th>Data type</th>
</tr>
</thead><tbody>
<tr>
<td>Quick Report ID</td>
<td>The ID of the Quick Report that will have its MDX statement replaced.</td>
<td>Integer</td>
</tr>
<tr>
<td>MDX statement</td>
<td>The MDX statement that will be replacing the current MDX statement in the Quick Report.</td>
<td>String</td>
</tr>
<tr>
<td>ReFormat</td>
<td>Defines whether or not to preserve or destroy the sheet formatting in the existing Quick Report. <code>True</code> preserves the sheet formatting. <code>False</code> destroys the sheet formatting.</td>
<td>Boolean</td>
</tr>
</tbody></table>
<h2 id='rowhierarchies'>RowHierarchies</h2>
<blockquote>
<p>Example</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Sub</span> <span class="nf">RowHierarchies</span><span class="p">()</span>
    <span class="k">Dim</span> <span class="nv">slicers</span> <span class="ow">As</span> <span class="kt">String</span>
    <span class="k">For</span> <span class="k">Each</span> <span class="n">Slicer</span> <span class="ow">In</span> <span class="n">cafe</span><span class="p">.</span><span class="n">QuickReports</span><span class="p">.</span><span class="n">Get</span><span class="p">(</span><span class="s">"0"</span><span class="p">).</span><span class="n">SlicerDimensions</span>
        <span class="k">If</span> <span class="n">slicers</span> <span class="o">&lt;&gt;</span> <span class="s">""</span> <span class="k">Then</span>
            <span class="n">slicers</span> <span class="o">=</span> <span class="n">slicers</span> <span class="o">&amp;</span> <span class="s">", "</span> <span class="o">&amp;</span> <span class="n">vbNewLine</span>
        <span class="k">End</span> <span class="k">If</span>
        <span class="n">slicers</span> <span class="o">=</span> <span class="n">slicers</span> <span class="o">&amp;</span> <span class="n">Slicer</span>
    <span class="k">Next</span>
    <span class="n">MsgBox</span> <span class="s">"Rows:"</span> <span class="n">rows</span> 
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div>
<p>RowHierarchies is used to return the hierarchies that exist in the rows of a Quick Report.</p>
<h3 id='syntax-21'>Syntax</h3>
<p>The following string is the syntax for the RowHierarchies method.</p>

<p><code>cafe.QuickReports.Get(&quot;&lt;Quick Report ID&quot;).RowDimensions</code></p>
<h3 id='arguments-11'>Arguments</h3>
<table><thead>
<tr>
<th>Argument</th>
<th>Description</th>
<th>Data type</th>
</tr>
</thead><tbody>
<tr>
<td>Quick Report ID</td>
<td>The ID of the Quick Report that the row hierarchies are being returned from.</td>
<td>Integer</td>
</tr>
</tbody></table>
<h2 id='select'>Select</h2>
<blockquote>
<p>Example</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Public</span> <span class="k">Sub</span> <span class="nf">SelectReport</span><span class="p">()</span>
    <span class="n">Reporting</span><span class="p">.</span><span class="n">GetCurrentReport</span><span class="p">(</span><span class="o">&lt;</span><span class="n">ActiveCell</span><span class="o">&gt;</span><span class="p">).</span><span class="n">Select</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div>
<p>Select is used to select and highlight the current active Quick Report.</p>
<h3 id='syntax-22'>Syntax</h3>
<p>The following string is the syntax for the Select method.</p>

<p><code>Reporting.GetCurrentReport(&lt;ActiveCell&gt;).Select</code></p>
<h2 id='setslicer'>SetSlicer</h2>
<blockquote>
<p>Example</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Public</span> <span class="k">Sub</span> <span class="nf">SetSlicer</span><span class="p">()</span>
    <span class="n">Reporting</span><span class="p">.</span><span class="n">GetCurrentReport</span><span class="p">(</span><span class="o">&lt;</span><span class="n">ActiveCell</span><span class="o">&gt;</span><span class="p">).</span><span class="n">SetSlicer</span> <span class="s">"[plan_business_unit].
    [plan_business_unit]"</span><span class="p">,</span> <span class="s">"10100"</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div>
<p>SetSlicer is used to set the values for a slicer dimension in the Quick Report.</p>
<h3 id='syntax-23'>Syntax</h3>
<p>The following string is the syntax for the SetSlicer method.</p>

<p><code>Reporting.GetCurrentReport(&lt;ActiveCell&gt;).SetSlicer “&lt;dimensions&gt;, &lt;name&gt;”</code></p>
<h3 id='arguments-12'>Arguments</h3>
<table><thead>
<tr>
<th>Argument</th>
<th>Description</th>
<th>Data type</th>
</tr>
</thead><tbody>
<tr>
<td>dimensions</td>
<td>The dimensions to set the slicer to.</td>
<td>String</td>
</tr>
<tr>
<td>name</td>
<td>The name to set the slicer to.</td>
<td>String</td>
</tr>
</tbody></table>
<h2 id='slicerhierarchies'>SlicerHierarchies</h2>
<blockquote>
<p>Example</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Sub</span> <span class="nf">RowHierarchies</span><span class="p">()</span>
    <span class="k">Dim</span> <span class="nv">slicers</span> <span class="ow">As</span> <span class="kt">String</span>
    <span class="k">For</span> <span class="k">Each</span> <span class="n">Slicer</span> <span class="ow">In</span> <span class="n">cafe</span><span class="p">.</span><span class="n">QuickReports</span><span class="p">.</span><span class="n">Get</span><span class="p">(</span><span class="s">"0"</span><span class="p">).</span><span class="n">SlicerDimensions</span>
        <span class="k">If</span> <span class="n">slicers</span> <span class="o">&lt;&gt;</span> <span class="s">""</span> <span class="k">Then</span>
            <span class="n">slicers</span> <span class="o">=</span> <span class="n">slicers</span> <span class="o">&amp;</span> <span class="s">", "</span> <span class="o">&amp;</span> <span class="n">vbNewLine</span>
        <span class="k">End</span> <span class="k">If</span>
        <span class="n">slicers</span> <span class="o">=</span> <span class="n">slicers</span> <span class="o">&amp;</span> <span class="n">Slicer</span>
    <span class="k">Next</span>
    <span class="n">MsgBox</span> <span class="s">"Slicers:"</span> <span class="n">slicers</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div>
<p>SlicerHierarchies is used to return the hierarchies that exist in the slicers of a Quick Report.</p>
<h3 id='syntax-24'>Syntax</h3>
<p>The following string is the syntax for the SlicerHierarchies method.</p>

<p><code>cafe.QuickReports.Get(&quot;&lt;Quick Report ID&quot;).SlicerDimensions</code></p>
<h3 id='arguments-13'>Arguments</h3>
<table><thead>
<tr>
<th>Argument</th>
<th>Description</th>
<th>Data type</th>
</tr>
</thead><tbody>
<tr>
<td>Quick Report ID</td>
<td>The ID of the Quick Report that the slicer hierarchies are being returned from.</td>
<td>Integer</td>
</tr>
</tbody></table>
<h2 id='useserverformats'>UseServerFormats</h2>
<blockquote>
<p>Example</p>
</blockquote>
<div class="highlight"><pre class="highlight vb tab-vb"><code><span class="k">Public</span> <span class="k">Sub</span> <span class="nf">ToggleServerFormats</span><span class="p">(</span><span class="n">r</span> <span class="ow">As</span> <span class="n">Range</span><span class="p">)</span>
   <span class="n">r</span><span class="p">.</span><span class="n">Worksheet</span><span class="p">.</span><span class="n">Activate</span>
   <span class="k">Set</span> <span class="n">fView</span> <span class="o">=</span> <span class="n">Reporting</span><span class="p">.</span><span class="n">GetCurrentReport</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
   <span class="k">If</span> <span class="k">Not</span> <span class="p">(</span><span class="n">fView</span> <span class="ow">Is</span> <span class="k">Nothing</span><span class="p">)</span> <span class="k">Then</span>
     <span class="n">fView</span><span class="p">.</span><span class="n">UseServerFormats</span> <span class="o">=</span> <span class="k">Not</span> <span class="n">fView</span><span class="p">.</span><span class="n">UseServerFormats</span>
     <span class="n">fView</span><span class="p">.</span><span class="n">Refresh</span>
   <span class="k">End</span> <span class="k">If</span>
<span class="k">End</span> <span class="k">Sub</span>
</code></pre></div>
<p>UseServerFormats clears any user applied formatting and applies server based formatting after a Quick Report is refreshed.</p>
<h3 id='syntax-25'>Syntax</h3>
<p>The following string is the syntax for the UseServerFormats method.</p>

<p><code>Reporting.GetCurrentReport(&lt;ActiveCell&gt;).UseServerFormats = &lt;True/False&gt;</code></p>
